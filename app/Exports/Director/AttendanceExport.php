<?php

namespace App\Exports\Director;

use App\Models\Attendance;
use App\Models\Department;
use Cake\Chronos\Chronos;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromQuery;
use Maatwebsite\Excel\Concerns\Exportable;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithCustomStartCell;
use Maatwebsite\Excel\Concerns\WithStyles;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Illuminate\Support\Str;

class AttendanceExport implements
    FromQuery,
    WithMapping,
    WithHeadings,
    ShouldAutoSize,
    WithColumnFormatting,
    WithCustomStartCell,
    WithStyles,
    WithEvents
{
    use Exportable;

    public function __construct(
        protected $startDate,
        protected $endDate,
        protected $selectedDepartment = '',
        protected $selectedStatus = '',
        protected $searchTerm = ''
    ) {
    }

    public function startCell(): string
    {
        return 'A7';
    }

    public function styles(Worksheet $sheet)
    {
        // Set column widths
        $sheet->getColumnDimension('A')->setWidth(20); // Employee Name
        $sheet->getColumnDimension('B')->setWidth(18); // Department
        $sheet->getColumnDimension('C')->setWidth(15); // Date
        $sheet->getColumnDimension('D')->setWidth(12); // Day
        $sheet->getColumnDimension('E')->setWidth(12); // Check In
        $sheet->getColumnDimension('F')->setWidth(12); // Check Out
        $sheet->getColumnDimension('G')->setWidth(15); // Status
        $sheet->getColumnDimension('H')->setWidth(20); // Check In Location
        $sheet->getColumnDimension('I')->setWidth(20); // Check Out Location
        $sheet->getColumnDimension('J')->setWidth(15); // Working Hours
        $sheet->getColumnDimension('K')->setWidth(30); // Notes

        // Application Header
        $sheet->mergeCells('A1:K2');
        $sheet->setCellValue('A1', 'Attendance Management Report');
        $sheet->getStyle('A1:K2')->applyFromArray([
            'font' => ['bold' => true, 'size' => 20],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '4F46E5'] // Indigo color
            ],
            'font' => [
                'color' => ['rgb' => 'FFFFFF']
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
                'vertical' => Alignment::VERTICAL_CENTER
            ]
        ]);

        // Report Information Section
        $sheet->mergeCells('A4:E4');
        $sheet->setCellValue('A4', 'Report Information');
        $sheet->getStyle('A4:E4')->applyFromArray([
            'font' => ['bold' => true],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => 'E5E7EB']
            ]
        ]);

        $user = Auth::user();
        $sheet->setCellValue('A5', 'Generated By');
        $sheet->setCellValue('B5', ': ' . $user->name . ' (Director)');
        $sheet->setCellValue('A6', 'Generated At');
        $sheet->setCellValue('B6', ': ' . now()->format('d F Y H:i'));

        // Filter Information Section
        $sheet->mergeCells('G4:K4');
        $sheet->setCellValue('G4', 'Applied Filters');
        $sheet->getStyle('G4:K4')->applyFromArray([
            'font' => ['bold' => true],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => 'E5E7EB']
            ]
        ]);

        $dateRange = Chronos::parse($this->startDate)->format('d F Y') .
            ' - ' . Chronos::parse($this->endDate)->format('d F Y');
        $sheet->setCellValue('G5', 'Date Range');
        $sheet->setCellValue('H5', ': ' . $dateRange);
        
        $filterInfo = '';
        if ($this->selectedDepartment) $filterInfo .= 'Dept: ' . $this->selectedDepartment . ' ';
        if ($this->selectedStatus) $filterInfo .= 'Status: ' . ucfirst(str_replace('_', ' ', $this->selectedStatus)) . ' ';
        if ($this->searchTerm) $filterInfo .= 'Search: ' . $this->searchTerm;
        
        $sheet->setCellValue('G6', 'Other Filters');
        $sheet->setCellValue('H6', ': ' . ($filterInfo ?: 'None'));

        // Table Headers Style
        $tableHeaders = 'A7:K7';
        $sheet->getStyle($tableHeaders)->applyFromArray([
            'font' => ['bold' => true],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '4F46E5']
            ],
            'font' => [
                'color' => ['rgb' => 'FFFFFF']
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER
            ],
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                ]
            ]
        ]);

        return [
            7 => ['font' => ['bold' => true]],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet;
                $lastRow = $sheet->getHighestRow();
                $range = 'A7:K' . $lastRow;

                // Zebra striping
                for ($row = 8; $row <= $lastRow; $row++) {
                    if ($row % 2 == 0) {
                        $sheet->getStyle('A' . $row . ':K' . $row)->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'startColor' => ['rgb' => 'F9FAFB']
                            ]
                        ]);
                    }
                }

                // Add borders to all cells
                $sheet->getStyle($range)->applyFromArray([
                    'borders' => [
                        'allBorders' => [
                            'borderStyle' => Border::BORDER_THIN,
                            'color' => ['rgb' => 'E5E7EB']
                        ]
                    ],
                    'alignment' => [
                        'vertical' => Alignment::VERTICAL_CENTER
                    ]
                ]);

                // Color coding for status
                for ($row = 8; $row <= $lastRow; $row++) {
                    $status = $sheet->getCell('G' . $row)->getValue();
                    $color = match (strtolower($status)) {
                        'present' => 'C6F6D5', // Green
                        'late' => 'FEF3C7',    // Yellow
                        'early leave' => 'DBEAFE', // Blue
                        'holiday' => 'E9D5FF',  // Purple
                        'pending present' => 'F3E8FF', // Light purple
                        default => 'F3F4F6'     // Gray
                    };

                    $sheet->getStyle('G' . $row)->applyFromArray([
                        'fill' => [
                            'fillType' => Fill::FILL_SOLID,
                            'startColor' => ['rgb' => $color]
                        ]
                    ]);
                }

                // Working hours conditional formatting
                for ($row = 8; $row <= $lastRow; $row++) {
                    $hours = $sheet->getCell('J' . $row)->getValue();
                    if (is_numeric($hours)) {
                        $color = match (true) {
                            $hours >= 8 => 'C6F6D5', // Green
                            $hours >= 4 => 'FEF3C7', // Yellow
                            default => 'FEE2E2'      // Red
                        };

                        $sheet->getStyle('J' . $row)->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'startColor' => ['rgb' => $color]
                            ]
                        ]);
                    }
                }

                // Add summary row at the bottom
                $summaryRow = $lastRow + 2;
                $sheet->mergeCells('A' . $summaryRow . ':K' . $summaryRow);
                $sheet->setCellValue('A' . $summaryRow, 'Total Records: ' . ($lastRow - 7) . ' | Generated on: ' . now()->format('d F Y H:i:s'));
                $sheet->getStyle('A' . $summaryRow . ':K' . $summaryRow)->applyFromArray([
                    'font' => ['bold' => true, 'italic' => true],
                    'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER]
                ]);
            }
        ];
    }

    public function query()
    {
        $query = Attendance::with(['user', 'user.department', 'checkInOffice', 'checkOutOffice'])
            ->orderBy('date', 'desc')
            ->orderBy('check_in', 'desc');

        // Apply date filter
        if ($this->startDate && $this->endDate) {
            $query->whereBetween('date', [$this->startDate, $this->endDate]);
        } elseif ($this->startDate) {
            $query->where('date', '>=', $this->startDate);
        } elseif ($this->endDate) {
            $query->where('date', '<=', $this->endDate);
        }

        // Apply department filter
        if ($this->selectedDepartment) {
            $departmentId = Department::where('name', $this->selectedDepartment)->value('id');
            if ($departmentId) {
                $query->whereHas('user', function ($q) use ($departmentId) {
                    $q->where('department_id', $departmentId);
                });
            }
        }

        // Apply status filter
        if ($this->selectedStatus) {
            $query->where('status', $this->selectedStatus);
        }

        // Apply search term
        if ($this->searchTerm) {
            $query->whereHas('user', function ($q) {
                $q->where('name', 'like', '%' . $this->searchTerm . '%')
                  ->orWhere('email', 'like', '%' . $this->searchTerm . '%');
            });
        }

        return $query;
    }

    public function headings(): array
    {
        return [
            'Employee Name',
            'Department',
            'Date',
            'Day',
            'Check In',
            'Check Out',
            'Status',
            'Check In Location',
            'Check Out Location',
            'Working Hours',
            'Notes'
        ];
    }

    public function map($attendance): array
    {
        return [
            $attendance->user ? $attendance->user->name : 'Unknown User',
            $attendance->user && $attendance->user->department ? $attendance->user->department->name : 'No Department',
            Chronos::parse($attendance->date)->format('d F Y'),
            Chronos::parse($attendance->date)->format('l'),
            $attendance->check_in ? Chronos::parse($attendance->check_in)->format('H:i') : 'Pending',
            $attendance->check_out ? Chronos::parse($attendance->check_out)->format('H:i') : 'Not Yet',
            Str::title(str_replace('_', ' ', $attendance->status)),
            $attendance->checkInOffice?->name ?? 'No Data',
            $attendance->checkOutOffice?->name ?? 'No Data',
            $attendance->working_hours ?? 0,
            $attendance->notes ? strip_tags($attendance->notes) : 'No Notes'
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => NumberFormat::FORMAT_DATE_DDMMYYYY,
            'J' => NumberFormat::FORMAT_NUMBER_00,
        ];
    }
}